#!/usr/bin/env bash
set -e

TITLE="ApacheNest"
AUTHORS="JianZCar and aceday"

INSTALL_DIR="$HOME/Documents/.apachenest"
WWW_DIR="$INSTALL_DIR/www"
CONF_DIR="$INSTALL_DIR/conf"

GREEN="\033[0;32m"
BLUE="\033[0;34m"
YELLOW="\033[1;33m"
NC="\033[0m"
CHECK="‚úîÔ∏è"
ERROR="‚ùå"
ROCKET="üöÄ"
GEAR="‚öôÔ∏è"
DOWNLOAD="üì•"
HOURGLASS="‚è≥"
SUCCESS="üéâ"

# Loading spinner function
spinner() {
	local pid=$!
	local delay=0.10
	local spinstr='‚†º‚†π‚†õ‚†è‚†ß‚†∂'
	while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
		local char="${spinstr:0:1}"
		spinstr="${spinstr:1}${char}"
		printf " %s " "$char"
		sleep $delay
		printf "\r"
	done
	printf "\r"
}

configure_env() {
	export NP_LOCATION="$INSTALL_DIR"
	export PATH="$PATH:$INSTALL_DIR/bin"
	export NP_GIT="$(which git)"
	if [[ -f $CONF_DIR/php-version.conf ]]; then
		PHP_VERSION=$(<$CONF_DIR/php-version.conf)
	fi
}

remove_dblock() {
	if [[ -d $INSTALL_DIR/.nix-portable/nix/var/nix/db/db.sqlite.lock ]]; then
		echo -e "\n${YELLOW}DB Lock Found Removing...${NC}"
		rm -rf $INSTALL_DIR/.nix-portable/nix/var/nix/db/db.sqlite.lock
		echo -e "${CHECK} ${GREEN}DB Lock removed${NC}"
	fi
}

setup_nix_portable() {
	echo -e "\n${BLUE}${ROCKET} Installing Nix-Portable ${ROCKET}${NC}"
	echo -e "${GEAR} ${YELLOW}Creating directory structure...${NC}"
	mkdir -p "$INSTALL_DIR/bin"
	mkdir -p "$WWW_DIR"
	mkdir -p "$CONF_DIR"
	mkdir -p "$INSTALL_DIR/apache"
	mkdir -p "$INSTALL_DIR/apache/logs"
	echo -e "${CHECK} ${GREEN}Directories created!${NC}"

	echo -e "\n${DOWNLOAD} ${YELLOW}Downloading nix-portable...${NC}"
	curl -sL https://github.com/DavHau/nix-portable/releases/latest/download/nix-portable-$(uname -m) > $INSTALL_DIR/bin/nix-portable & spinner
	chmod +x "$INSTALL_DIR/bin/nix-portable"
	echo -e "${CHECK} ${GREEN}Download complete!${NC}"
	echo -e "${SUCCESS} ${GREEN}Installation complete!${NC}"
}

install_apache() {
	if ! nix-portable nix path-info -f '<nixpkgs>' apacheHttpd.out >/dev/null 2>&1; then
		echo -e "${DOWNLOAD} ${YELLOW}Downloading Apache...${NC}"
		nix-portable nix-shell -p apacheHttpd --run "" 2>/dev/null & spinner
		echo -e "${CHECK} ${GREEN}Download complete!${NC}"
	fi
}

install_php() {
	if ! nix-portable nix path-info -f '<nixpkgs>' "$PHP_VERSION" >/dev/null 2>&1; then
		echo -e "${DOWNLOAD} ${YELLOW}Downloading $PHP_VERSION...${NC}"
		nix-portable nix-shell -p "$PHP_VERSION" --run "" 2>/dev/null & spinner
		echo -e "${CHECK} ${GREEN}Download complete!${NC}"

		echo "<?php phpinfo(); ?>" > "$WWW_DIR/index.php"
	fi
}

install_mysql() {
	if ! nix-portable nix path-info -f '<nixpkgs>' mysql.out >/dev/null 2>&1; then
		echo -e "${DOWNLOAD} ${YELLOW}Downloading MySQL...${NC}"
		nix-portable nix-shell -p mysql --run "" 2>/dev/null & spinner
		echo -e "${CHECK} ${GREEN}Download complete!${NC}"
	fi
}

config_mysql() {
	echo -e "${YELLOW}Setting up MySQL...${NC}"
	
	# Create MySQL directories
	if [[ ! -d $INSTALL_DIR/mysql ]]; then
		mkdir -p "$INSTALL_DIR/mysql"
		echo -e "${CHECK} ${GREEN}MySQL directory created!${NC}"
	fi
	
	if [[ ! -d $INSTALL_DIR/mysql/data ]]; then
		mkdir -p "$INSTALL_DIR/mysql/data"
		echo -e "${CHECK} ${GREEN}MySQL data directory created!${NC}"
	fi
	
	# Create MySQL configuration file
	if [[ ! -f $INSTALL_DIR/mysql/my.cnf ]]; then
		echo -e "${YELLOW}Creating MySQL config...${NC}"
		cat > "$INSTALL_DIR/mysql/my.cnf" <<EOF
[mysqld]
datadir = $INSTALL_DIR/mysql/data
socket = $INSTALL_DIR/mysql/mysql.sock
user = $(whoami)
bind-address = 127.0.0.1
port = 3306
skip-external-locking
default_storage_engine = InnoDB
innodb_file_per_table = 1
innodb_log_file_size = 64M
log-error = $INSTALL_DIR/mysql/mysql.log
pid-file = $INSTALL_DIR/mysql/mysql.pid
tmpdir = $INSTALL_DIR/mysql

[mysqld_safe]
log-error = $INSTALL_DIR/mysql/mysql.log
pid-file = $INSTALL_DIR/mysql/mysql.pid

[mysql]
socket = $INSTALL_DIR/mysql/mysql.sock

[client]
socket = $INSTALL_DIR/mysql/mysql.sock
EOF
		echo -e "${CHECK} ${GREEN}MySQL config created!${NC}"
	fi

	# Create log file
	if [[ ! -f $INSTALL_DIR/mysql/mysql.log ]]; then
		touch "$INSTALL_DIR/mysql/mysql.log"
		echo -e "${CHECK} ${GREEN}MySQL log file created!${NC}"
	fi

	# Create PID file
	if [[ ! -f $INSTALL_DIR/mysql/mysql.pid ]]; then
		touch "$INSTALL_DIR/mysql/mysql.pid"
		echo -e "${CHECK} ${GREEN}MySQL PID file created!${NC}"
	fi
	
<<<<<<< HEAD
	# Check if MySQL is running and offer to secure it
	if pgrep -af "mysqld" > /dev/null; then
		echo -e "${YELLOW}MySQL server is running!${NC}"
		echo -e "${BLUE}Would you like to run mysql_secure_installation to set up security? (y/n)${NC}"
		read -n 1 -r
		echo
		if [[ $REPLY =~ ^[Yy]$ ]]; then
			echo -e "${YELLOW}Running MySQL security setup...${NC}"
			nix-portable nix-shell -p mysql --run "
				mysql_secure_installation --socket=$INSTALL_DIR/mysql/mysql.sock
			"
			echo -e "${CHECK} ${GREEN}MySQL security setup completed!${NC}"
		fi
	else
		echo -e "${YELLOW}MySQL server is not running. Start MySQL first to run security configuration.${NC}"
	fi
	
	echo -e "${SUCCESS} ${GREEN}MySQL configuration complete!${NC}"
}

secure_mysql() {
	echo -e "${YELLOW}MySQL Security Configuration${NC}"
	
	if ! pgrep -af "mysqld" > /dev/null; then
		echo -e "${ERROR} ${RED}MySQL server is not running! Please start MySQL first.${NC}"
		return 1
	fi
	
	echo -e "${BLUE}This will run mysql_secure_installation to:${NC}"
	echo -e "  ‚Ä¢ Set root password"
	echo -e "  ‚Ä¢ Remove anonymous users"
	echo -e "  ‚Ä¢ Disable remote root login"
	echo -e "  ‚Ä¢ Remove test database"
	echo -e "  ‚Ä¢ Reload privilege tables"
	echo
	echo -e "${YELLOW}Do you want to continue? (y/n)${NC}"
	read -n 1 -r
	echo
	
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		echo -e "${YELLOW}Running MySQL security setup...${NC}"
		nix-portable nix-shell -p mysql --run "
			mysql_secure_installation --socket=$INSTALL_DIR/mysql/mysql.sock
		"
		echo -e "${SUCCESS} ${GREEN}MySQL security configuration completed!${NC}"
	else
		echo -e "${YELLOW}Security configuration cancelled.${NC}"
	fi
}

=======
	echo -e "${SUCCESS} ${GREEN}MySQL configuration complete!${NC}"
}

>>>>>>> refs/remotes/origin/main

setup_apache_php() {
  echo "php82" > $CONF_DIR/php-version.conf
 	PHP_VERSION=$(<$CONF_DIR/php-version.conf)
  install_apache
  install_php
}

setup_configs() {
	APACHE_PATH=$(nix-portable nix-shell -p apacheHttpd --run "echo \$(dirname \$(dirname \$(which httpd)))" 2>/dev/null)
	echo -e "\n${GEAR} ${YELLOW}Setting up ApacheNest configs...${NC}"
	
	echo -e "${YELLOW}Creating PHP-FPM config...${NC}"
	cat > "$CONF_DIR/php-fpm.conf" <<EOF
[global]
error_log = $INSTALL_DIR/php-fpm.log

[www]
listen = 127.0.0.1:9000
listen.allowed_clients = 127.0.0.1
pm = dynamic
pm.max_children = 5
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 3
chdir = /
EOF

	echo -e "${YELLOW}Creating Apache config...${NC}"
	cat > "$CONF_DIR/httpd.conf" <<EOF
ServerName 127.0.0.1
ServerRoot "$INSTALL_DIR/apache"
Listen 8080
LoadModule mpm_event_module $APACHE_PATH/modules/mod_mpm_event.so
LoadModule proxy_module $APACHE_PATH/modules/mod_proxy.so
LoadModule proxy_fcgi_module $APACHE_PATH/modules/mod_proxy_fcgi.so
LoadModule dir_module $APACHE_PATH/modules/mod_dir.so
LoadModule mime_module $APACHE_PATH/modules/mod_mime.so
LoadModule authz_core_module $APACHE_PATH/modules/mod_authz_core.so
LoadModule unixd_module $APACHE_PATH/modules/mod_unixd.so

DocumentRoot "$WWW_DIR"
<Directory "$WWW_DIR">
		Require all granted
</Directory>

DirectoryIndex index.php index.html

<FilesMatch \.php$>
		SetHandler "proxy:fcgi://127.0.0.1:9000"
</FilesMatch>

TypesConfig $APACHE_PATH/conf/mime.types
EOF
	echo -e "${SUCCESS} ${GREEN}ApacheNest config ready!${NC}\n"
}

setup_mysql() {
	echo -e "${YELLOW}Installing MySQL ${NC}"
	install_mysql
	config_mysql
}

setup_apachenest(){
	setup_nix_portable
	setup_apache_php
	setup_configs

	setup_mysql
}

select_php() {
	stop_php
  local CURRENT_VERSION=$PHP_VERSION
  [[ -f php-version.conf ]] && CURRENT_VERSION=$(<php-version.conf)
  
	TMP_OUT=$(mktemp)
	(
		nix-portable nix search nixpkgs "php-with-extensions" \
		  --exclude "apacheHttpdPackages" --json 2>/dev/null | \
		  jq -r 'keys[] | select(test("php8[1-4]$")) | sub(".*\\."; "")' \
		  > "$TMP_OUT"
	) &
	CMD_PID=$!
	spinner "$CMD_PID"
	PHP_VERSIONS=$(<"$TMP_OUT")
	rm "$TMP_OUT"

  local SORTED_VERSIONS
  SORTED_VERSIONS=$(
    printf "%s\n" $CURRENT_VERSION $PHP_VERSIONS \
      | awk '!seen[$0]++'
  )

 
  local SELECTED_VERSION=$(printf "%s\n" $SORTED_VERSIONS | fzf --border --highlight-line --height=10% --layout=reverse --header-lines=1 --prompt="Select PHP version > ")
	[[ -z $SELECTED_VERSION ]] && return
	PHP_VERSION=$SELECTED_VERSION
  echo "$SELECTED_VERSION" > $CONF_DIR/php-version.conf
  echo -e "${CHECK} ${GREEN}PHP version selected!${NC}"
  install_php
}

start_apache(){
	nix-portable nix-shell -p apacheHttpd --run "
		httpd -f $CONF_DIR/httpd.conf &
	"
	clear
}

start_php(){
	nix-portable nix-shell -p $PHP_VERSION  --run "
		php-fpm -y $CONF_DIR/php-fpm.conf &
	"
	clear
}

stop_apache(){
	if pgrep -af "$CONF_DIR/httpd.conf" > /dev/null; then 
		pkill -f "$CONF_DIR/httpd.conf"
		sleep 1
	fi
	clear
}

stop_php(){
	if pgrep -af "$CONF_DIR/php-fpm.conf" > /dev/null; then 
		pkill -f "$CONF_DIR/php-fpm.conf"
		sleep 1
	fi
	clear
}

start_mysql(){
	# Ensure MySQL is configured first
	config_mysql
	
	# Initialize database if not already done
	if [[ ! -f $INSTALL_DIR/mysql/data/mysql/db.opt ]]; then
		echo -e "${YELLOW}Initializing MySQL database...${NC}"
		nix-portable nix-shell -p mysql --run "
			mysql_install_db --defaults-file=$INSTALL_DIR/mysql/my.cnf --datadir=$INSTALL_DIR/mysql/data --user=\$(whoami)
		" 2>/dev/null
		echo -e "${CHECK} ${GREEN}MySQL database initialized!${NC}"
	fi
	
	MYSQLD_LOG="$INSTALL_DIR/mysql/mysql.log"
	echo -e "${YELLOW}Starting MySQL...${NC}"
	nix-portable nix-shell -p mysql --run "
		mysqld_safe --defaults-file=$INSTALL_DIR/mysql/my.cnf &
	" > "$MYSQLD_LOG" 2>&1 &
<<<<<<< HEAD
	
	# Wait for MySQL to fully start and create socket
	echo -e "${YELLOW}Waiting for MySQL to start...${NC}"
	local wait_count=0
	while [[ $wait_count -lt 30 ]]; do
		if [[ -S $INSTALL_DIR/mysql/mysql.sock ]] && nix-portable nix-shell -p mysql --run "
			mysqladmin --socket=$INSTALL_DIR/mysql/mysql.sock ping
		" >/dev/null 2>&1; then
			echo -e "${CHECK} ${GREEN}MySQL started successfully!${NC}"
			break
		fi
		sleep 1
		((wait_count++))
		printf "."
	done
	
	if [[ $wait_count -eq 30 ]]; then
		echo -e "\n${ERROR} ${RED}MySQL failed to start properly. Check logs: $MYSQLD_LOG${NC}"
	fi
	
=======
	sleep 2
	echo -e "${CHECK} ${GREEN}MySQL started!${NC}"
>>>>>>> refs/remotes/origin/main
	clear
}

stop_mysql(){
	echo -e "${YELLOW}Stopping MySQL...${NC}"
	
	# Try graceful shutdown first using mysqladmin
	if pgrep -af "mysqld" > /dev/null; then
		nix-portable nix-shell -p mysql --run "
			mysqladmin --socket=$INSTALL_DIR/mysql/mysql.sock shutdown
		" 2>/dev/null || true
		sleep 2
	fi
	
	# Force kill if still running
	if pgrep -af "mysqld" > /dev/null; then 
		echo -e "${YELLOW}Force stopping MySQL processes...${NC}"
		pkill -f "mysqld_safe" 2>/dev/null || true
		pkill -f "mysqld" 2>/dev/null || true
		sleep 2
	fi
	
	# Clean up PID file
	if [[ -f $INSTALL_DIR/mysql/mysql.pid ]]; then
		rm -f "$INSTALL_DIR/mysql/mysql.pid"
	fi
	
	echo -e "${CHECK} ${GREEN}MySQL stopped!${NC}"
	clear
}

restart_apache(){
	stop_apache && sleep 1
	start_apache
}

restart_php(){
	stop_php && sleep 1
	start_php
}


restart_all() {
	restart_apache
	restart_php
	restart_mysql
}

start_all(){
	if ! pgrep -af "$CONF_DIR/httpd.conf" > /dev/null; then 
		start_apache
	fi
	if ! pgrep -af "$CONF_DIR/php-fpm.conf" > /dev/null; then 
		start_php
	fi
	if ! pgrep -af "mysqld" > /dev/null; then 
		start_mysql
	fi
	clear
}

stop_all(){
	stop_apache
	stop_php
	stop_mysql
	clear
}

restart(){
	restart_apache
	restart_php
	restart_mysql
	clear
}

all_menu(){
	clear
	local ACTIONS
	while true; do
		remove_dblock
		printf "\n${BLUE}${ROCKET} ${TITLE} ${ROCKET}${NC}\n"

		ACTIONS=("Start" "Stop" "Restart" "Refresh")
		
		local SELECTED_ACTION=$(printf "%s\n" "${ACTIONS[@]}" | fzf --border --highlight-line --height=10% --layout=reverse --prompt="All > ")
		[[ -z $SELECTED_ACTION ]] && break
		case $SELECTED_ACTION in
			"Start")
			 	start_all & spinner ;;
			"Stop")
			 	stop_all & spinner ;;
			"Restart")
				restart_all & spinner ;;
			"Refresh")
				refresh_menu ;;
		esac
	done
	clear
}

apache_menu(){
	local ACTIONS
	while true; do
		clear
		remove_dblock
		printf "\n${BLUE}${ROCKET} ${TITLE} ${ROCKET}${NC}\n"
		ACTIONS=($(if ! pgrep -af "$CONF_DIR/httpd.conf" > /dev/null; then 
			echo Start
		else
			echo Stop
		fi) "Restart" "Refresh")
		
		local SELECTED_ACTION=$(printf "%s\n" "${ACTIONS[@]}" | fzf --border --highlight-line --height=10% --layout=reverse --prompt="Apache > ")
		[[ -z $SELECTED_ACTION ]] && break
		case $SELECTED_ACTION in
			"Start")
			 	start_apache & spinner ;;
			"Stop")
			 	stop_apache & spinner ;;
			"Restart")
				restart_apache & spinner ;;
			"Refresh")
				refresh_menu ;;
		esac
	done
	clear
}

php_menu(){
	clear
	local ACTIONS
	while true; do
		remove_dblock
		printf "\n${BLUE}${ROCKET} ${TITLE} ${ROCKET}${NC}\n"
		ACTIONS=($(if ! pgrep -af "$CONF_DIR/php-fpm.conf" > /dev/null; then 
			echo Start
		else
			echo Stop
		fi) "Restart" "Change Version" "Refresh")
		
		local SELECTED_ACTION=$(printf "%s\n" "${ACTIONS[@]}" | fzf --border --highlight-line --height=10% --layout=reverse --prompt="PHP > ")
		[[ -z $SELECTED_ACTION ]] && break
		case $SELECTED_ACTION in
			"Start")
			 	start_php & spinner ;;
			"Stop")
			 	stop_php & spinner ;;
			"Restart")
				restart_php & spinner ;;
			"Refresh")
				refresh_menu ;;
			"Change Version")
				select_php ;;
		esac
	done
	clear
}

restart_mysql() {
	clear
	stop_mysql
	start_mysql
}

<<<<<<< HEAD
=======
mysql_reset() {
	sh -c " \"\"'"
}
>>>>>>> refs/remotes/origin/main

mysql_menu() {
	clear
	local ACTIONS
	echo -e "\n${BLUE}${ROCKET} ${TITLE} ${ROCKET}${NC}"
	while true; do
		remove_dblock
<<<<<<< HEAD
		ACTIONS=("Start" "Stop" "Restart" "Refresh" "Config" "Security")
=======
		ACTIONS=("Start" "Stop" "Restart" "Refresh" "Config")
>>>>>>> refs/remotes/origin/main
		
		local SELECTED_ACTION=$(printf "%s\n" "${ACTIONS[@]}" | fzf --border --highlight-line --height=10% --layout=reverse --prompt="MySQL > ")
		[[ -z $SELECTED_ACTION ]] && break
		case $SELECTED_ACTION in
			"Start")
			 	start_mysql & spinner ;;
			"Stop")
			 	stop_mysql & spinner ;;
			"Restart")
				restart_mysql & spinner ;;
			"Refresh")
				refresh_menu ;;
			"Config")
				config_mysql ;;
<<<<<<< HEAD
			"Security")
				secure_mysql ;;
=======
>>>>>>> refs/remotes/origin/main
		esac
	done
	clear
}

refresh_menu() {
	clear
}

main_menu(){
	clear
	local ACTIONS
	ACTIONS=("All" "Apache" "PHP" "MySQL" "Refresh" "Settings" "About" "Exit")
	while true; do
		remove_dblock
		printf "\n${BLUE}${ROCKET} ${TITLE} ${ROCKET}${NC}\n"
		local SELECTED_ACTION=$(printf "%s\n" "${ACTIONS[@]}" | fzf --border --highlight-line --height=10% --layout=reverse \
		--preview-window=80%:wrap --preview='
		SELECTED={}
		if [[ $SELECTED == "All" ]]; then
			echo -e "Apache status: \t'$(if ! pgrep -af "$CONF_DIR/httpd.conf" > /dev/null; then 
				echo üü•Inactive 
			else
				echo üü©Active 
			fi)'"
			echo -e "PHP status: \t'$(if ! pgrep -af "$CONF_DIR/php-fpm.conf" > /dev/null; then 
				echo üü•Inactive 
			else
				echo üü©Active 
			fi)'"
			echo -e "MySQL status: \t'$(if ! pgrep -af "mysqld" > /dev/null; then 
				echo üü•Inactive 
			else
				echo üü©Active 
			fi)'"
		fi
		if [[ $SELECTED == "Apache" ]]; then
			echo "Status: '$(if ! pgrep -af "$CONF_DIR/httpd.conf" > /dev/null; then 
				echo üü•Inactive 
			else
				echo üü©Active 
			fi)'"
		  nix-portable nix-shell -p apacheHttpd --run "httpd -v" 2>/dev/null
		  echo -e "\n===Logs===\n"
		  [[ -f '$INSTALL_DIR'/apache/logs/error_log ]] && cat '$INSTALL_DIR'/apache/logs/error_log
		fi
		if [[ $SELECTED == "PHP" ]]; then
			echo "Status: '$(if ! pgrep -af "$CONF_DIR/php-fpm.conf" > /dev/null; then 
				echo üü•Inactive 
			else
				echo üü©Active 
			fi)'"
		  nix-portable nix-shell -p '$PHP_VERSION' --run "php -v" 2>/dev/null
		  echo -e "\n===Logs===\n"
		  [[ -f '$INSTALL_DIR'/php-fpm.log ]] && cat '$INSTALL_DIR'/php-fpm.log
		fi
		if [[ $SELECTED == "MySQL" ]]; then
			echo "Status: '$(if ! pgrep -af "mysqld" > /dev/null; then 
				echo üü•Inactive 
			else
				echo üü©Active 
			fi)'"
		  nix-portable nix-shell -p mysql --run "mysql --version" 2>/dev/null
		  echo -e "\n===Logs===\n"
		  [[ -f '$INSTALL_DIR'/mysql/mysql.log ]] && cat '$INSTALL_DIR'/mysql/mysql.log
		fi
		')
		[[ -z $SELECTED_ACTION ]] && break
		case $SELECTED_ACTION in
			"All")
				all_menu ;;
			"Apache")
			 	apache_menu ;;
			"PHP")
			 	php_menu ;;
			"MySQL")
				mysql_menu ;;
			"Refresh")
				refresh_menu ;;
			"Settings")
				echo Settings ;;
			"About")
				about ;;
			"Exit")
				bye ;;
		esac
	done
	clear
}

about() {
	echo -e "\n${BLUE}${ROCKET} ${TITLE} ${ROCKET}${NC}"
	echo -e "${YELLOW}Authors: ${GREEN} ${AUTHORS} ${NC}"

	read -n 1 -s
	clear
}

bye() {
	echo -e "\nBye! ${SUCCESS} ${GREEN}Thank you for using ApacheNest!${NC}\n"
	exit 0
}

trap bye SIGINT

configure_env
[[ ! -d $INSTALL_DIR ]] && setup_apachenest
remove_dblock
main_menu
